package main

import (
	"golang.org/x/text/cases"
	"golang.org/x/text/language"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/descriptorpb"
	"strings"

	option "github.com/geomodular/meta-store/gen/ai/h2o/meta_store"
	"github.com/geomodular/meta-store/pkg/grammar"
)

func main() {
	protogen.Options{}.Run(func(gen *protogen.Plugin) error {
		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}
			genAll(gen, f)
		}
		return nil
	})
}

func genAll(plugin *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	filename := file.GeneratedFilenamePrefix + "_service.proto"
	g := plugin.NewGeneratedFile(filename, file.GoImportPath)

	genHeader(g, file)

	for _, message := range file.Messages {
		genService(g, message)
	}

	return g
}

func genHeader(g *protogen.GeneratedFile, file *protogen.File) {
	g.P("// Code generated by protoc-gen-service. DO NOT EDIT!!!")
	g.P("syntax = \"", file.Proto.GetSyntax(), "\";")
	g.P()
	g.P("package ", file.Proto.GetPackage(), ";")
	g.P()

	options := file.Desc.Options().(*descriptorpb.FileOptions)
	goPackage := options.GetGoPackage()
	if goPackage != "" {
		g.P("option go_package = \"", options.GetGoPackage(), "\";")
		g.P()
	}

	packageImportPath := createImportPathFromPackage(file.Proto.GetPackage())
	g.P("import \"google/protobuf/empty.proto\";")
	g.P("import \"google/protobuf/field_mask.proto\";")
	g.P("import \"", file.GeneratedFilenamePrefix, ".proto\";")
	g.P("import \"", packageImportPath, "custom_options.proto\";")
	g.P()
}

func createImportPathFromPackage(p string) string {
	return strings.Replace(p, ".", "/", -1) + "/"
}

func genService(g *protogen.GeneratedFile, message *protogen.Message) {

	options := message.Desc.Options().(*descriptorpb.MessageOptions)
	collectionOpts := proto.GetExtension(options, option.E_CollectionOptions).(*option.CollectionOptions)

	toTitle := cases.Title(language.AmericanEnglish)
	toLower := cases.Lower(language.AmericanEnglish)

	name := message.GoIdent.GoName
	nameLowerPl := grammar.Pluralize(name)
	namePl := toTitle.String(nameLowerPl)
	nameLower := toLower.String(name)
	g.P("service ", name, "Service {")
	g.P("  option (collection_name) = \"", collectionOpts.GetName(), "\";")
	g.P()
	g.P("  rpc Create", name, "(Create", name, "Request) returns (", name, ");")
	g.P("  rpc Get", name, "(Get", name, "Request) returns (", name, ");")
	g.P("  rpc Update", name, "(Update", name, "Request) returns (", name, ");")
	g.P("  rpc List", namePl, "(List", namePl, "Request) returns (List", namePl, "Response);")
	g.P("  rpc Remove", name, "(Remove", name, "Request) returns (google.protobuf.Empty);")
	g.P("}")
	g.P()
	g.P("message Create", name, "Request {")
	g.P("  string parent = 1;")
	g.P("  string mime = 2;")
	g.P("  ", name, " ", nameLower, " = 3;")
	g.P("}")
	g.P()
	g.P("message Get", name, "Request {")
	g.P("  string name = 1;")
	g.P("}")
	g.P()
	g.P("message Update", name, "Request {")
	g.P("  ", name, " ", nameLower, " = 1;")
	g.P("  google.protobuf.FieldMask update_mask = 2;")
	g.P("}")
	g.P()
	g.P("message List", namePl, "Request {")
	g.P("  int32 page_size = 1;")
	g.P("  string page_token = 2;")
	g.P("  string parent = 3;")
	g.P("}")
	g.P()
	g.P("message List", namePl, "Response {")
	g.P("  int32 total_size = 1;")
	g.P("  string next_page_token = 2;")
	g.P("  repeated ", name, " ", nameLowerPl, " = 3;")
	g.P("}")
	g.P()
	g.P("message Remove", name, "Request {")
	g.P("  string name = 1;")
	g.P("}")
	g.P()
}
